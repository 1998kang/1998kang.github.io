<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>阿康的笔记</title>
    <link>https://1998kang.github.io/</link>
    <description>Recent content on 阿康的笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 14 Mar 2020 21:25:45 +0800</lastBuildDate>
    
	<atom:link href="https://1998kang.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>常用git命令</title>
      <link>https://1998kang.github.io/posts/git/</link>
      <pubDate>Sat, 14 Mar 2020 21:25:45 +0800</pubDate>
      
      <guid>https://1998kang.github.io/posts/git/</guid>
      <description>删除别人的git版本管理（rm -rf ./git）
1.新建仓库 ，复制好仓库路径
2.文件夹中
git init
git remote add origin + 仓库路径
git pull origin master （将码云上的仓库pull到本地文件夹，也相当于同步）
3.将想上传的文件添加到新建的文件里面
git add .(.表示所有的) //保存到缓存区
git commit -m &amp;lsquo;添加的文件描述&amp;rsquo;
git push origin master //将本地仓库推送到远程仓库
git pull &amp;ndash;rebase origin master //同步本地的
常用：
git add .
git commit -m &amp;lsquo;描述&amp;rsquo;
git push origin master
git push -u origin master //-u 参数的意义，指定trach branch。</description>
    </item>
    
    <item>
      <title>java基础</title>
      <link>https://1998kang.github.io/posts/javabase/</link>
      <pubDate>Sat, 14 Mar 2020 20:25:45 +0800</pubDate>
      
      <guid>https://1998kang.github.io/posts/javabase/</guid>
      <description></description>
    </item>
    
    <item>
      <title>常用springb-data-redis操作</title>
      <link>https://1998kang.github.io/posts/redis/</link>
      <pubDate>Sat, 14 Mar 2020 19:25:45 +0800</pubDate>
      
      <guid>https://1998kang.github.io/posts/redis/</guid>
      <description>stringRedisTemplate.opsForValue().set(&amp;ldquo;test&amp;rdquo;, &amp;ldquo;100&amp;rdquo;,60*10,TimeUnit.SECONDS);//向redis里存入数据和设置缓存时间
stringRedisTemplate.opsForValue().get(&amp;ldquo;test&amp;rdquo;)//根据key获取缓存中的val
stringRedisTemplate.boundValueOps(&amp;ldquo;test&amp;rdquo;).increment(-1);//val做-1操作
stringRedisTemplate.boundValueOps(&amp;ldquo;test&amp;rdquo;).increment(1);//val +1
stringRedisTemplate.getExpire(&amp;ldquo;test&amp;rdquo;)//根据key获取过期时间
stringRedisTemplate.getExpire(&amp;ldquo;test&amp;rdquo;,TimeUnit.SECONDS)//根据key获取过期时间并换算成指定单位
stringRedisTemplate.delete(&amp;ldquo;test&amp;rdquo;);//根据key删除缓存
stringRedisTemplate.hasKey(&amp;ldquo;546545&amp;rdquo;);//检查key是否存在，返回boolean值
stringRedisTemplate.expire(&amp;ldquo;red_123&amp;rdquo;,1000 , TimeUnit.MILLISECONDS);//设置过期时间
stringRedisTemplate.opsForSet().add(&amp;ldquo;red_123&amp;rdquo;, &amp;ldquo;1&amp;rdquo;,&amp;ldquo;2&amp;rdquo;,&amp;ldquo;3&amp;rdquo;);//向指定key中存放set集合
stringRedisTemplate.opsForSet().isMember(&amp;ldquo;red_123&amp;rdquo;, &amp;ldquo;1&amp;rdquo;)//根据key查看集合中是否存在指定数据
stringRedisTemplate.opsForSet().members(&amp;ldquo;red_123&amp;rdquo;);//根据key获取set集合</description>
    </item>
    
    <item>
      <title>mysql查询</title>
      <link>https://1998kang.github.io/posts/mysql/</link>
      <pubDate>Sat, 14 Mar 2020 14:21:03 +0800</pubDate>
      
      <guid>https://1998kang.github.io/posts/mysql/</guid>
      <description>自增主键。一个听起来很吓人的名字，但实际含义很简单。“自增”的意思是，每次在这张数据表中创建一条新记录的时候，数据库都会在上一个id值的基础上自动加上一个固定的步长(默认就是+1)作为新记录的id值。而所谓“主键”，就是能够在一张数据表中唯一标识一条记录的字段，因为每条记录的id都不一样，所以它是主键。这个字段可以是为了单纯的标识数据的唯一性，也可以具有一些业务含义，比如这里的id就同时也是骑手的账号id；
基本查询
SELECT 列名(或者*，表示所有列) **FROM** 表名 **WHERE** 筛选条件;
IN 操作
SELECT name, real_name_certify_state, level, level_city FROM tb_rider WHERE id IN(2, 4, 7);
SELECT name, real_name_certify_state, level, level_city FROM tb_rider WHERE name IN(&amp;ldquo;Banner&amp;rdquo;, &amp;ldquo;Thor&amp;rdquo;, &amp;ldquo;Coulson&amp;rdquo;);
关系运算符：AND 和 OR（不同条件也可以连接）
SELECT * FROM tb_rider WHERE created_at &amp;gt;= &amp;ldquo;2017-02-01 00:00:00&amp;rdquo; AND created_at &amp;lt; &amp;ldquo;2017-06-01 00:00:00&amp;rdquo; AND level = 3;
排序：ORDER BY
SELECT order_id, created_at FROM tb_order WHERE rider_id = 1 AND grabbed_time &amp;gt;= &amp;ldquo;2017-12-30 00:00:00&amp;rdquo; AND grabbed_time &amp;lt; &amp;ldquo;2017-12-31 00:00:00&amp;rdquo; AND order_state = 40 ORDER BY created_at DESC;</description>
    </item>
    
    <item>
      <title>mysql复习</title>
      <link>https://1998kang.github.io/posts/my-first-post/</link>
      <pubDate>Sat, 14 Mar 2020 13:12:05 +0800</pubDate>
      
      <guid>https://1998kang.github.io/posts/my-first-post/</guid>
      <description>闯关答题：快速复习
前面的几个段落我们学习了Sql查询中最常用，而且特别好用的语法知识，让我们简单总结一下。
 数据库、数据表的概念； 最基本的Sql查询结构； IN查询和逻辑操作语法(AND/OR)； 对查询结果进行排序和LIMIT语法； 聚合函数(COUNT/AVG/SUM)和DISTINCT语法； 对查询结果分组(GROUP BY)； 对聚合函数的结果进行筛选的HAVING语法； 字段类型和索引的概念和作用； JOIN语法的一家子(LEFT JOIN/RIGHT JOIN/INNER JOIN/FULL JOIN)； 嵌套的SELECT语法；  学习了这么多知识点，实在是太腻害了！给自己点赞！
但是(凡事都有个但是)&amp;hellip;
想要把这些知识点融会贯通，灵活应用到现实工作中更多变、更复杂的查询场景，仅仅是“学会”是不够的，还需要更多的“练习”和“回味”。
这个部分我设计了一个“闯关答题”项目，通过思考和回答这些闯关题，帮助你更好的掌握上面提到的知识点。
先来看一下答题将要用到的数据表。
[1] 商品数据表：tb_product
   id product_id name price     1 1001 iPad Pro 10.5 64G WLAN 4888   2 1002 Macbook Pro 2017 13.3 i5/8G/256GB 13888   3 1003 iPhone X 64G 8388    建表语句：
CREATE TABLE tb_product ( id bigint(20) NOT NULL AUTO_INCREMENT COMMENT &amp;lsquo;自增主键&amp;rsquo;, product_id bigint(20) NOT NULL DEFAULT &amp;lsquo;0&amp;rsquo; COMMENT &amp;lsquo;商品id&amp;rsquo;, name varchar(100) NOT NULL DEFAULT &#39;&amp;rsquo; COMMENT &amp;lsquo;商品名称&amp;rsquo;, price int(11) NOT NULL DEFAULT &amp;lsquo;0&amp;rsquo; COMMENT &amp;lsquo;商品价格&amp;rsquo;, PRIMARY KEY (id), UNIQUE KEY uk_product_id (product_id) ) ENGINE=InnoDB AUTO_INCREMENT=14 DEFAULT CHARSET=utf8 COMMENT=&#39;商品信息表&amp;rsquo;;</description>
    </item>
    
  </channel>
</rss>